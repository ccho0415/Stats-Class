set.seed(1) # Please don't remove this code!
#install.packages("ISLR")
library(ISLR)
## Scatterplot Lag 1
plot(Weekly$Lag1,Weekly$Today,main="Returns",xlab="One Week Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag1),col="red")
##Scatterplot Lag 2
plot(Weekly$Lag2,Weekly$Today,main="Returns",xlab="Two Weeks Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag2),col="blue")
## Boxplot Lag 1
boxplot(Weekly$Lag1~Weekly$Direction,main="Returns",ylab="One Week Ago",xlab="Direction")
## ACF Plot (Try Lag 2 also)
acf(data.frame(Weekly$Today,Weekly$Lag1))
## Scatterplot Lag 1
plot(Weekly$Lag1,Weekly$Today,main="Returns",xlab="One Week Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag1),col="red")
##Scatterplot Lag 2
plot(Weekly$Lag2,Weekly$Today,main="Returns",xlab="Two Weeks Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag2),col="blue")
## Boxplot Lag 1
boxplot(Weekly$Lag1~Weekly$Direction,main="Returns",ylab="One Week Ago",xlab="Direction")
## ACF Plot (Try Lag 2 also)
acf(data.frame(Weekly$Today,Weekly$Lag1))
acf(data.frame(Weekly$Today,Weekly$Lag2))
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == 1, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Smarket$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == 1, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Smarket$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
View(KNN.decision)
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == 1, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Smarket$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision()
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Smarket$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision()
KNN.decision <- function(Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5, Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5,) {
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == 1, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Smarket$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision(1,2,3,4,5)
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == 1, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Smarket$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision(-.5, .5, -.5, -.5, 5)
set.seed(1) # Please don't remove this code!
#install.packages("ISLR")
library(ISLR)
## Scatterplot Lag 1
plot(Weekly$Lag1,Weekly$Today,main="Returns",xlab="One Week Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag1),col="red")
##Scatterplot Lag 2
plot(Weekly$Lag2,Weekly$Today,main="Returns",xlab="Two Weeks Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag2),col="blue")
## Boxplot Lag 1
boxplot(Weekly$Lag1~Weekly$Direction,main="Returns",ylab="One Week Ago",xlab="Direction")
## ACF Plot (Try Lag 2 also)
acf(data.frame(Weekly$Today,Weekly$Lag1))
acf(data.frame(Weekly$Today,Weekly$Lag2))
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == 1, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Smarket$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision(1,2,3,4,5)
Weekly
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
View(test)
View(train)
View(test)
View(train)
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
for (i in 1:test.length()){
print(test[i])
}
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
for (i in 1:test.length){
print(test[i])
}
set.seed(1) # Please don't remove this code!
#install.packages("ISLR")
library(ISLR)
## Scatterplot Lag 1
plot(Weekly$Lag1,Weekly$Today,main="Returns",xlab="One Week Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag1),col="red")
##Scatterplot Lag 2
plot(Weekly$Lag2,Weekly$Today,main="Returns",xlab="Two Weeks Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag2),col="blue")
## Boxplot Lag 1
boxplot(Weekly$Lag1~Weekly$Direction,main="Returns",ylab="One Week Ago",xlab="Direction")
## ACF Plot (Try Lag 2 also)
acf(data.frame(Weekly$Today,Weekly$Lag1))
acf(data.frame(Weekly$Today,Weekly$Lag2))
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == 1, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
neighbors  <- order(dists)[1:K]
neighb.dir <- Smarket$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision(1,2,3,4,5)
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
for (i in 1:test.length){
print(test[i])
}
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
for (i in 1:nrow(test)){
print(test[i])
}
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
for (i in 1:nrow(test)){
print(test[i], )
}
View(test)
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
for (i in 1:nrow(test)){
print(test[i], Direction )
}
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
for (i in 1:nrow(test)){
print(test[i, ])
}
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == 1, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
market  <- order(dists)[1:K]
market.dir <- Weekly$Direction[market]
choice      <- names(which.max(table(market.dir)))
return(choice)
}
KNN.decision(1,2,3,4,5)
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
max <- nrow(test)
result <- c()
for (i in 1:result){
result[i] <- KNN.decision(test[i, 2], test[i, 3], test[i, 4], test[i, 5], test[i, 6])
}
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
max <- nrow(test)
result <- c()
for (i in 1:result){
result[i] <- KNN.decision(test[i, 2], test[i, 3], test[i, 4], test[i, 5], test[i, 6])
}
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
max <- nrow(test)
result <- rep(0, max)
for (i in 1:result){
result[i] <- KNN.decision(test[i, 2], test[i, 3], test[i, 4], test[i, 5], test[i, 6])
}
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
max <- nrow(test)
result <- rep(0, max)
for (i in 1:result){
result[i] <- KNN.decision(test[i, 2], test[i, 3], test[i, 4], test[i, 5], test[i, 6])
}
set.seed(1) # Please don't remove this code!
#install.packages("ISLR")
library(ISLR)
## Scatterplot Lag 1
plot(Weekly$Lag1,Weekly$Today,main="Returns",xlab="One Week Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag1),col="red")
##Scatterplot Lag 2
plot(Weekly$Lag2,Weekly$Today,main="Returns",xlab="Two Weeks Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag2),col="blue")
## Boxplot Lag 1
boxplot(Weekly$Lag1~Weekly$Direction,main="Returns",ylab="One Week Ago",xlab="Direction")
## ACF Plot (Try Lag 2 also)
acf(data.frame(Weekly$Today,Weekly$Lag1))
acf(data.frame(Weekly$Today,Weekly$Lag2))
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == n, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
market  <- order(dists)[1:K]
market.dir <- Weekly$Direction[market]
choice      <- names(which.max(table(market.dir)))
return(choice)
}
KNN.decision(1,2,3,4,5)
KNN.decision <- function(Lag1.new, Lag2.new, Lag3.new, Lag4.new, Lag5.new, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(Lag1)
stopifnot(length(Lag2) == n, length(Lag1.new) == 1, length(Lag2.new) == 1, K <= n)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
market  <- order(dists)[1:K]
market.dir <- Weekly$Direction[market]
choice      <- names(which.max(table(market.dir)))
return(choice)
}
KNN.decision(1,2,3,4,5)
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
max <- nrow(test)
result <- rep(NA, max)
for (i in 1:result){
result[i] <- KNN.decision(test[i, 2], test[i, 3], test[i, 4], test[i, 5], test[i, 6])
}
View(train)
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
max <- nrow(test)
result <- rep(NA, max)
for (i in 1:result){
result[i] <- KNN.decision(test[i, 2], test[i, 3], test[i, 4], test[i, 5], test[i, 6], K=5, Lag1 = train[i,2], Lag2 = train[i,3], Lag3 =train[i,4], Lag4 = train[i,5], Lag5 = train[i,6])
}
KNN.decision <- function(NewPoint, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(NewPoint)
stopifnot(length(NewPoint) == 5)
dists       <- sqrt((Lag1-Lag1.new)^2 + (Lag2-Lag2.new)^2 + (Lag3-Lag3.new)^2 + (Lag4-Lag4.new)^2 + (Lag5-Lag5.new)^2)
market  <- order(dists)[1:K]
market.dir <- Weekly$Direction[market]
choice      <- names(which.max(table(market.dir)))
return(choice)
}
KNN.decision(c(1,2,3,4,5))
KNN.decision <- function(NewPoint, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(NewPoint)
stopifnot(length(NewPoint) == 5)
dists       <- sqrt((Lag1-NewPoint[1])^2 + (Lag2-NewPoint[2])^2 + (Lag3-NewPoint[3])^2 + (Lag4-NewPoint[4])^2 + (Lag5-NewPoint[5])^2)
market  <- order(dists)[1:K]
market.dir <- Weekly$Direction[market]
choice      <- names(which.max(table(market.dir)))
return(choice)
}
KNN.decision(c(1,2,3,4,5))
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
max <- nrow(test)
prediction <- rep(NA, max)
for(i in max){
prediction[i]<-KNN.decision(c(test$Lag1[i], test$Lag2[i], test$Lag3[i], test$Lag4[i], test$Lag5[i]), K=5, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(predictions !=test$Direction)/max
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
max <- nrow(test)
prediction <- rep(NA, max)
for(i in max){
prediction[i]<-KNN.decision(c(test$Lag1[i], test$Lag2[i], test$Lag3[i], test$Lag4[i], test$Lag5[i]), K=5, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(prediction !=test$Direction)/max
test.err
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
max <- nrow(test)
prediction <- rep(NA, max)
for(i in max){
insert <- c(test$Lag1[i], test$Lag2[i], test$Lag3[i], test$Lag4[i], test$Lag5[i])
prediction[i]<-KNN.decision(insert, K=5, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(prediction !=test$Direction)/max
test.err
test <- Weekly[Weekly$Year >=2009, ]
train <- Weekly[Weekly$Year <2009, ]
max <- nrow(test)
prediction <- rep(NA, max)
for(i in max){
insert <- c(test$Lag1[i], test$Lag2[i], test$Lag3[i], test$Lag4[i], test$Lag5[i])
prediction[i]<-KNN.decision(insert, K=5, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(prediction != test$Direction)/max
test.err
test <- Weekly[Weekly$Year >= 2009, ]
train <- Weekly[Weekly$Year < 2009, ]
max <- nrow(test)
prediction <- rep(NA, max)
for(i in max){
insert <- c(test$Lag1[i], test$Lag2[i], test$Lag3[i], test$Lag4[i], test$Lag5[i])
prediction[i]<-KNN.decision(insert, K=5, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(prediction != test$Direction)/max
test.err
test <- Weekly[Weekly$Year >= 2009, ]
train <- Weekly[Weekly$Year < 2009, ]
max <- nrow(test)
predictions <- rep(NA, max)
for(i in max){
insert <- c(test$Lag1[i], test$Lag2[i], test$Lag3[i], test$Lag4[i], test$Lag5[i])
predictions[i]<-KNN.decision(insert, K=5, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(predictions != test$Direction)/max
test.err
test <- Weekly[Weekly$Year >= 2009, ]
train <- Weekly[Weekly$Year < 2009, ]
max <- nrow(test)
predictions <- rep(NA, max)
for(i in 1:max){
insert <- c(test$Lag1[i], test$Lag2[i], test$Lag3[i], test$Lag4[i], test$Lag5[i])
predictions[i]<-KNN.decision(insert, K=5, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(predictions != test$Direction)/max
test.err
```{r}
test <- Weekly[Weekly$Year >= 2009, ]
train <- Weekly[Weekly$Year < 2009, ]
max <- nrow(test)
predictions <- rep(NA, max)
for(i in 1:max){
insert <- c(test$Lag1[i], test$Lag2[i], test$Lag3[i], test$Lag4[i], test$Lag5[i])
predictions[i]<-KNN.decision(insert, K=3, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(predictions != test$Direction)/max
test.err
set.seed(1) # Please don't remove this code!
#install.packages("ISLR")
library(ISLR)
## Scatterplot Lag 1
plot(Weekly$Lag1,Weekly$Today,main="Returns",xlab="One Week Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag1),col="red")
##Scatterplot Lag 2
plot(Weekly$Lag2,Weekly$Today,main="Returns",xlab="Two Weeks Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag2),col="blue")
## Boxplot Lag 1
boxplot(Weekly$Lag1~Weekly$Direction,main="Returns",ylab="One Week Ago",xlab="Direction")
## ACF Plot (Try Lag 2 also)
acf(data.frame(Weekly$Today,Weekly$Lag1))
acf(data.frame(Weekly$Today,Weekly$Lag2))
KNN.decision <- function(NewPoint, K = 5, Lag1 = Weekly$Lag1, Lag2 = Weekly$Lag2, Lag3 = Weekly$Lag3, Lag4 = Weekly$Lag4, Lag5 = Weekly$Lag5) {
n <- length(NewPoint)
stopifnot(length(NewPoint) == 5)
dists       <- sqrt((Lag1-NewPoint[1])^2 + (Lag2-NewPoint[2])^2 + (Lag3-NewPoint[3])^2 + (Lag4-NewPoint[4])^2 + (Lag5-NewPoint[5])^2)
market  <- order(dists)[1:K]
market.dir <- Weekly$Direction[market]
choice      <- names(which.max(table(market.dir)))
return(choice)
}
KNN.decision(c(1,2,3,4,5))
test <- Weekly[Weekly$Year >= 2009, ]
train <- Weekly[Weekly$Year < 2009, ]
max <- nrow(test)
predictions <- rep(NA, max)
for(i in 1:max){
insert <- c(test$Lag1[i], test$Lag2[i], test$Lag3[i], test$Lag4[i], test$Lag5[i])
predictions[i]<-KNN.decision(insert, K=5, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(predictions != test$Direction)/max
test.err
test <- Weekly[Weekly$Year >= 2009, ]
train <- Weekly[Weekly$Year < 2009, ]
max <- nrow(test)
predictions <- rep(NA, max)
for(i in 1:max){
insert <- c(test$Lag1[i], test$Lag2[i], test$Lag3[i], test$Lag4[i], test$Lag5[i])
predictions[i]<-KNN.decision(insert, K=3, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(predictions != test$Direction)/max
test.err
max <- nrow(Weekly)
fold <- rep(NA, max)
max <- nrow(Weekly)
fold <- rep(NA, max)
v <- rep(1:9, 121)
newv <- sample(v)
max <- nrow(Weekly)
max
fold <- rep(NA, max)
v <- rep(1:9, 121)
newv <- sample(v)
View(train)
View(test)
max <- nrow(Weekly)
max
fold <- rep(Weekly[1,]:Weekly[9,], 121)
max <- nrow(Weekly)
fold <- rep(Weekly[1,]:Weekly[9,], 121)
max <- nrow(Weekly)
first <-Weekly[1,]
second <-Weekly[9,]
fold <- rep(first:second, 121)
max <- nrow(Weekly)
fold <- rep(1:9, 121)
newv <- sample(fold)
n <- nrow(Weekly)
fold <- rep(1:9, n)
newv <- sample(fold)
n <- nrow(Weekly)
fold <- rep(Weekly[1,]:Weekly[9,], n)
n <- nrow(Weekly)
fold <- rep(1:9, 121)
newv <- sample(fold)
?rep
predictions <- rep(NA, max)
for(i in 1:newv){
i
insert <- c(Weekly$Lag1[i], Weekly$Lag2[i], Weekly$Lag3[i], Weekly$Lag4[i],Weekly$Lag5[i])
predictions[i]<-KNN.decision(insert, K=5, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(predictions != test$Direction)/max
test.err
n <- nrow(Weekly)
fold <- rep(1:9, 121)
newv <- sample(fold)
predictions <- rep(NA, max)
for(i in 1:newv){
i
insert <- c(Weekly$Lag1[i], Weekly$Lag2[i], Weekly$Lag3[i], Weekly$Lag4[i],Weekly$Lag5[i])
predictions[i]<-KNN.decision(insert, K=5, Lag1 = train$Lag1, Lag2 = train$Lag2, Lag3 = train$Lag3, Lag4 = train$Lag4, Lag5 = train$Lag5)
}
test.err <- sum(predictions != test$Direction)/max
test.err
