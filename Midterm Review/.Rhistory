normal10 <- rnorm(n=10)
normal1000 <- rnorm(n=1000)
normal10000 <- rnorm(n=10000)
normal100000 <- rnorm(n=100000)
samplemeans<- c(mean(normal10), mean(normal100), mean(normal10000), mean(normal100000))
set.seed(1) # Please don't remove this code!
rnorm(n = 5, mean = 10, sd = 3)
normal100 <- rnorm(n = 100)
mean(normal100)
sd(normal100)
hist(normal100)
normal10 <- rnorm(n=10)
normal1000 <- rnorm(n=1000)
normal10000 <- rnorm(n=10000)
normal100000 <- rnorm(n=100000)
samplemeans<- c(mean(normal10), mean(normal100), mean(normal1000), mean(normal10000), mean(normal100000))
length(samplemeans)
normal1mil <- rnorm(n=1000000, mean=3, sd =4)
normal1mil <- rnorm(n=1000000, mean=3, sd =4)
mean(normal1mil)
sd(normal1mil)
mean(normal1mil>3)
mean(normal1mil[normal1mil > 3])
normal1mil_mat <- matrix(data= normal1mil, nrow= 100, ncol = 10000)
?matrix
mean(normal1mil_mat[,1234])
?colSums
colSums(normal1mil_mat)
colSums(mean(normal1mil_mat))
colSums(normal1mil_mat)
mean(colSums(normal1mil_mat))
colSums(mean(normal1mil_mat))
?mean
colSums(mean(normal1mil_mat[,x]))
sd(normal1mil)
mean(normal1mil[normal1mil > 3])
normal1mil <- rnorm(n=1000000, mean=3, sd =2)
mean(normal1mil)
sd(normal1mil)
mean(normal1mil[normal1mil > 3])
normal1mil_mat <- matrix(data= normal1mil, nrow= 100, ncol = 10000)
mean(normal1mil_mat[,1234])
col_means <- colSums(normal1mil_mat)/samp_size
samp_size <- 100
col_means <- colSums(normal1mil_mat)/samp_size
hist(col_means)
?str
?split
?table
?read.table
Versicolor <- (ifelse iris$Species == "Versicolor", 1, 0)
Versicolor <- (if else iris$Species == "Versicolor", 1, 0)
Versicolor <- ifelse(iris$Species == "Versicolor", 1, 0)
## head function
head(iris)
## names function
names(iris)
## head function
head(iris)
## names function
names(iris)
iris
Versicolor <- ifelse(iris$Species == "versicolor", 1, 0)
boxplot(Sepal.Width~Versicolor,main="Sepal Width of Versicolor",ylab="width",data=iris)
boxplot(Sepal.Width~Versicolor,main="Sepal Width",ylab="width",data=iris)
mean(iris[,iris$Species=="setosa"])
mean(iris[iris$Species=="setosa",])
mean(iris[iris$Species=="setosa",iris$Sepal.Length])
mean(iris[iris[,"setosa"],iris$Sepal.Length])
mean(iris[iris$Species="setosa",iris$Sepal.Length])
mean(iris[iris$Species["setosa"],iris$Sepal.Length])
mean(iris[iris["setosa", Species],iris$Sepal.Length])
mean(iris[iris$Species=="setosa","Sepal.Length"])
tapply(iris$Sepal.Length,iris$Species,mean)
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
# Loop
#for (j in measurements) {
MeanFlowers<-iris[iris$Species, mean(j)]
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
# Loop
for (j in measurements) {
MeanFlowers<-iris[iris$Species, mean(j)]
}
MeanFlowers
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
# Loop
for (j in measurements) {
MeanFlowers[j]<-iris[iris$Species, mean(j)]
}
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
# Loop
for (j in measurements) {
MeanFlowers[j,]<-tapply(iris[,j],iris[,Species] mean)
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
# Loop
for (j in measurements) {
MeanFlowers[j,]<-tapply(iris[,j],iris[,Species], mean)
}
# define a matrix of zeros
MeanFlowers <- matrix(0,nrow=4,ncol=3)
# define a character vector corresponding to the numeric variable names
measurements <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
# name the rows and columns of the matrix MeanFlowers
rownames(MeanFlowers)  <- measurements
colnames(MeanFlowers)  <- c("setosa","versicolor","virginica")
# Loop
for (j in measurements) {
MeanFlowers[j,]<-tapply(iris[,j],iris[,"Species"], mean)
}
MeanFlowers
# You'll want to type your response to question A(1) here.  Your response should look like:
# setwd("~/Desktop/Data/")
diamonds <- read.csv("diamonds_small.csv", as.is = TRUE, header = TRUE)
rows       <- dim(diamonds)[1]
diamonds <- diamonds[sample(1:rows, 2000), ]
# Of course, your answer should not be commented out.
?lm
# You'll want to type your response to question A(1) here.  Your response should look like:
# setwd("~/Desktop/Data/")
diamonds <- read.csv("diamonds_small.csv", as.is = TRUE, header = TRUE)
rows       <- dim(diamonds)[1]
diamonds <- diamonds[sample(1:rows, 2000), ]
lm0 <- lm(formula= price~carat)
# You'll want to type your response to question A(1) here.  Your response should look like:
# setwd("~/Desktop/Data/")
diamonds <- read.csv("diamonds_small.csv", as.is = TRUE, header = TRUE)
rows       <- dim(diamonds)[1]
diamonds <- diamonds[sample(1:rows, 2000), ]
lm0 <- lm(formula= price~carat, diamonds)
# Of course, your answer should not be commented out.
# You'll want to type your response to question A(1) here.  Your response should look like:
# setwd("~/Desktop/Data/")
diamonds <- read.csv("diamonds_small.csv", as.is = TRUE, header = TRUE)
rows       <- dim(diamonds)[1]
diamonds <- diamonds[sample(1:rows, 2000), ]
lm0 <- lm(formula= price~carat, diamonds)
coef(lm0)
# Of course, your answer should not be commented out.
# You'll want to type your response to question B(1) here.  Your response should look like:
n <- nrow(diamonds)
n
resample1 <- sample(1:n, n, replace = TRUE)
# Remove the comment symbol in front of the above after n is assigned in B(1)
# You'll want to type your response to question B(2) here.  Your response should look like:
B <- 1000
resampled_values <- matrix(NA, nrow = B, ncol = n)
for (b in 1:B) {
resampled_values[b, ]<-sample(1:B, B, replace = TRUE)
}
View(resampled_values)
# You'll want to type your response to question B(2) here.  Your response should look like:
B <- 1000
resampled_values <- matrix(NA, nrow = B, ncol = n)
for (b in 1:B) {
resampled_values[b, ]<-sample(1:n, n, replace = TRUE)
}
set.seed(1) # Please don't remove this code!
# You'll want to type your response to question A(1) here.  Your response should look like:
# setwd("~/Desktop/Data/")
diamonds <- read.csv("diamonds_small.csv", as.is = TRUE, header = TRUE)
rows       <- dim(diamonds)[1]
diamonds <- diamonds[sample(1:rows, 2000), ]
lm0 <- lm(formula= price~carat, diamonds)
coef(lm0)
# Of course, your answer should not be commented out.
# You'll want to type your response to question B(1) here.  Your response should look like:
n <- nrow(diamonds)
n
resample1 <- sample(1:n, n, replace = TRUE)
# Remove the comment symbol in front of the above after n is assigned in B(1)
# You'll want to type your response to question B(2) here.  Your response should look like:
B <- 1000
resampled_values <- matrix(NA, nrow = B, ncol = n)
for (b in 1:B) {
resampled_values[b, ]<-sample(1:n, n, replace = TRUE)
}
# You'll want to type your response to question B(3) here.  Your response should look like:
resample1_ests <- coefficients((lm(price~carat, data = diamonds[resample1,])))
resample1_ests
# You'll want to type your response to question B(4) here.  Your response should look like:
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
names(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
resamplerows <-resampled_values[b,]
resampled_data <- diamonds[resampled_rows,]
resampled_ests[b,]<-coefficients(lm(price~carat, data=resampled_data))
}
# You'll want to type your response to question B(4) here.  Your response should look like:
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
names(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
resampled_rows <-resampled_values[b,]
resampled_data <- diamonds[resampled_rows,]
resampled_ests[b,]<-coefficients(lm(price~carat, data=resampled_data))
}
head(resampled_ests)
# You'll want to type your response to question B(5) here.  Your response should look like:
diff_estimates <- coefficients(lm0)[2] - resampled_ests[,"Slope_Est"]
set.seed(1) # Please don't remove this code!
# You'll want to type your response to question A(1) here.  Your response should look like:
# setwd("~/Desktop/Data/")
diamonds <- read.csv("diamonds_small.csv", as.is = TRUE, header = TRUE)
rows       <- dim(diamonds)[1]
diamonds <- diamonds[sample(1:rows, 2000), ]
lm0 <- lm(formula= price~carat, diamonds)
coef(lm0)
# Of course, your answer should not be commented out.
# You'll want to type your response to question B(1) here.  Your response should look like:
n <- nrow(diamonds)
n
resample1 <- sample(1:n, n, replace = TRUE)
# Remove the comment symbol in front of the above after n is assigned in B(1)
# You'll want to type your response to question B(2) here.  Your response should look like:
B <- 1000
resampled_values <- matrix(NA, nrow = B, ncol = n)
for (b in 1:B) {
resampled_values[b, ]<-sample(1:n, n, replace = TRUE)
}
# You'll want to type your response to question B(3) here.  Your response should look like:
resample1_ests <- coefficients((lm(price~carat, data = diamonds[resample1,])))
resample1_ests
# resampled_data <- diamonds[resample1, ]
# Remove the comment symbol in front of the above after resample1 is assigned in B(2)
# You'll want to type your response to question B(4) here.  Your response should look like:
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
names(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
resampled_rows <-resampled_values[b,]
resampled_data <- diamonds[resampled_rows,]
resampled_ests[b,]<-coefficients(lm(price~carat, data=resampled_data))
}
head(resampled_ests)
# You'll want to type your response to question B(5) here.  Your response should look like:
diff_estimates <- coefficients(lm0)[2] - resampled_ests[,"Slope_Est"]
View(resampled_ests)
# You'll want to type your response to question B(5) here.  Your response should look like:
diff_estimates <- coefficients(lm0)[2] - resampled_ests[2]
# You'll want to type your response to question B(5) here.  Your response should look like:
diff_estimates <- coefficients(lm0)[2] - resampled_ests[2]
hist(diff_estimates)
# You'll want to type your response to question B(5) here.  Your response should look like:
diff_estimates <- coefficients(lm0)[2] - resampled_ests[, "Slope_Est"]
# You'll want to type your response to question B(4) here.  Your response should look like:
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
colnames(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
resampled_rows <-resampled_values[b,]
resampled_data <- diamonds[resampled_rows,]
resampled_ests[b,]<-coefficients(lm(price~carat, data=resampled_data))
}
head(resampled_ests)
# You'll want to type your response to question B(5) here.  Your response should look like:
diff_estimates <- coefficients(lm0)[2] - resampled_ests[, "Slope_Est"]
hist(diff_estimates)
sd(resampled_ests[,"Slop_Est"])
sd(resampled_ests[,"Slope_Est"])
# You'll want to type your response to question C(1) here.  Your response should look like:
Cl <- 2*coefficients(lm0)[2] - quantile(resampled_ests[,"Slope_Est"], 0.975)
Cu <- 2*coefficients(lm0)[2] - quantile(resampled_ests[,"Slope_Est"], 0.025)
int <- c(Cl, Cu)
int
